/*
 * Evaluation
 *
 * This API descripes the online evaluation service, as accessed by the user and organizers.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

type EvalAPI struct {
	EvalService EvalService
}

func ProvideEvalAPI(ev EvalService) EvalAPI {
	return EvalAPI{EvalService: ev}
}

// CourseprofsCourseProfIdDelete - Deletes a module by ID
func (ev *EvalAPI) CourseprofsCourseProfIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CourseprofsCourseProfIdGet - Get a courseprof by ID
func (ev *EvalAPI) CourseprofsCourseProfIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CourseprofsCourseProfIdPatch - Change a courseprof by ID
func (ev *EvalAPI) CourseprofsCourseProfIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CourseprofsCourseProfIdReportGet - Get a courseProf report
func (ev *EvalAPI) CourseprofsCourseProfIdReportGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CourseprofsGet -
func (ev *EvalAPI) CourseprofsGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CourseprofsPost -
func (ev *EvalAPI) CourseprofsPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdDelete - Deletes a module by ID
func (ev *EvalAPI) CoursesCourseIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdGet - Get a course by ID
func (ev *EvalAPI) CoursesCourseIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdInvitationsGet -
func (ev *EvalAPI) CoursesCourseIdInvitationsGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdPatch - Change a course by ID
func (ev *EvalAPI) CoursesCourseIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdReportGet - Get a course report
func (ev *EvalAPI) CoursesCourseIdReportGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdTutorsGet -
func (ev *EvalAPI) CoursesCourseIdTutorsGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdTutorsPost -
func (ev *EvalAPI) CoursesCourseIdTutorsPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdTutorsTutorIdDelete - Deletes a tutor by ID
func (ev *EvalAPI) CoursesCourseIdTutorsTutorIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdTutorsTutorIdGet - Get a tutor by ID
func (ev *EvalAPI) CoursesCourseIdTutorsTutorIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdTutorsTutorIdPatch - Change a tutor by ID
func (ev *EvalAPI) CoursesCourseIdTutorsTutorIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesCourseIdTutorsTutorIdReportGet - Get a tutor report
func (ev *EvalAPI) CoursesCourseIdTutorsTutorIdReportGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesGet -
func (ev *EvalAPI) CoursesGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// CoursesPost -
func (ev *EvalAPI) CoursesPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FacultiesFacultyIdGet - Get a faculty by ID
func (ev *EvalAPI) FacultiesFacultyIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FacultiesFacultyIdPatch - Change a faculty by ID
func (ev *EvalAPI) FacultiesFacultyIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FacultiesGet -
func (ev *EvalAPI) FacultiesGet(c *gin.Context) {
	c.JSON(http.StatusOK, ev.EvalService.FindAllFaculties())
}

// FacultiesPost -
func (ev *EvalAPI) FacultiesPost(c *gin.Context) {
	var faculty Faculty
	err := c.BindJSON(&faculty)
	if err != nil {
		log.Println(err)
		c.Status(http.StatusBadRequest)
		return
	}

	c.JSON(http.StatusOK, ev.EvalService.Save(faculty))
}

// FormsFormIdGet - Get a form by ID
func (ev *EvalAPI) FormsFormIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FormsFormIdPatch - Change a form by ID
func (ev *EvalAPI) FormsFormIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FormsGet -
func (ev *EvalAPI) FormsGet(c *gin.Context) {
	c.JSON(http.StatusOK, ev.EvalService.FindAllForms())
}

// FormsPost -
func (ev *EvalAPI) FormsPost(c *gin.Context) {
	var form Form
	err := c.BindJSON(&form)
	if err != nil {
		log.Println(err)
		c.Status(http.StatusBadRequest)
		return
	}

	c.JSON(http.StatusOK, ev.EvalService.SaveForm(form))
}

// ModulesGet -
func (ev *EvalAPI) ModulesGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ModulesModuleIdDelete - Deletes a module by ID
func (ev *EvalAPI) ModulesModuleIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ModulesModuleIdGet - Get a module by ID
func (ev *EvalAPI) ModulesModuleIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ModulesModuleIdPatch - Change a module by ID
func (ev *EvalAPI) ModulesModuleIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ModulesPost -
func (ev *EvalAPI) ModulesPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ProfsGet -
func (ev *EvalAPI) ProfsGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ProfsPost -
func (ev *EvalAPI) ProfsPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ProfsProfIdDelete - Deletes a module by ID
func (ev *EvalAPI) ProfsProfIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ProfsProfIdGet - Get a prof by ID
func (ev *EvalAPI) ProfsProfIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ProfsProfIdPatch - Change a prof by ID
func (ev *EvalAPI) ProfsProfIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// QuestionaireInvitationIdGet -
func (ev *EvalAPI) QuestionaireInvitationIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// QuestionaireInvitationIdPost -
func (ev *EvalAPI) QuestionaireInvitationIdPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// TermsGet -
func (ev *EvalAPI) TermsGet(c *gin.Context) {
	c.JSON(http.StatusOK, ev.EvalService.FindAllTerms())
}

// TermsPost -
func (ev *EvalAPI) TermsPost(c *gin.Context) {
	var term Term
	err := c.BindJSON(&term)
	if err != nil {
		log.Println(err)
		c.Status(http.StatusBadRequest)
		return
	}
	t, err := ev.EvalService.SaveTerm(term)
	if err != nil {
		log.Println(err)
		c.Status(http.StatusBadRequest)
		return
	}
	c.JSON(http.StatusOK, t)
}

// TermsTermIdGet - Get a term by ID
func (ev *EvalAPI) TermsTermIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// TermsTermIdPatch - Change a term by ID
func (ev *EvalAPI) TermsTermIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// TermsTermIdReportGet - Get a term report
func (ev *EvalAPI) TermsTermIdReportGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

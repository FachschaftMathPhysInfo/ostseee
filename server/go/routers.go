/*
 * Evaluation
 *
 * This API descripes the online evaluation service, as accessed by the user and organizers.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter(Db *gorm.DB) *gin.Engine {
	evalAPI := initEvalAPI(Db)
	var routes = Routes{
		{
			"Index",
			http.MethodGet,
			"/v1/",
			Index,
		},

		{
			"CourseprofsCourseProfIdDelete",
			http.MethodDelete,
			"/v1/courseprofs/:courseProfId",
			evalAPI.CourseprofsCourseProfIdDelete,
		},

		{
			"CourseprofsCourseProfIdGet",
			http.MethodGet,
			"/v1/courseprofs/:courseProfId",
			evalAPI.CourseprofsCourseProfIdGet,
		},

		{
			"CourseprofsCourseProfIdPatch",
			http.MethodPatch,
			"/v1/courseprofs/:courseProfId",
			evalAPI.CourseprofsCourseProfIdPatch,
		},

		{
			"CourseprofsCourseProfIdReportGet",
			http.MethodGet,
			"/v1/courseprofs/:courseProfId/report",
			evalAPI.CourseprofsCourseProfIdReportGet,
		},

		{
			"CourseprofsGet",
			http.MethodGet,
			"/v1/courseprofs",
			evalAPI.CourseprofsGet,
		},

		{
			"CourseprofsPost",
			http.MethodPost,
			"/v1/courseprofs",
			evalAPI.CourseprofsPost,
		},

		{
			"CoursesCourseIdDelete",
			http.MethodDelete,
			"/v1/courses/:courseId",
			evalAPI.CoursesCourseIdDelete,
		},

		{
			"CoursesCourseIdGet",
			http.MethodGet,
			"/v1/courses/:courseId",
			evalAPI.CoursesCourseIdGet,
		},

		{
			"CoursesCourseIdInvitationsGet",
			http.MethodGet,
			"/v1/courses/:courseId/invitations",
			evalAPI.CoursesCourseIdInvitationsGet,
		},

		{
			"CoursesCourseIdPatch",
			http.MethodPatch,
			"/v1/courses/:courseId",
			evalAPI.CoursesCourseIdPatch,
		},

		{
			"CoursesCourseIdReportGet",
			http.MethodGet,
			"/v1/courses/:courseId/report",
			evalAPI.CoursesCourseIdReportGet,
		},

		{
			"CoursesCourseIdTutorsGet",
			http.MethodGet,
			"/v1/courses/:courseId/tutors",
			evalAPI.CoursesCourseIdTutorsGet,
		},

		{
			"CoursesCourseIdTutorsPost",
			http.MethodPost,
			"/v1/courses/:courseId/tutors",
			evalAPI.CoursesCourseIdTutorsPost,
		},

		{
			"CoursesCourseIdTutorsTutorIdDelete",
			http.MethodDelete,
			"/v1/courses/:courseId/tutors/:tutorId",
			evalAPI.CoursesCourseIdTutorsTutorIdDelete,
		},

		{
			"CoursesCourseIdTutorsTutorIdGet",
			http.MethodGet,
			"/v1/courses/:courseId/tutors/:tutorId",
			evalAPI.CoursesCourseIdTutorsTutorIdGet,
		},

		{
			"CoursesCourseIdTutorsTutorIdPatch",
			http.MethodPatch,
			"/v1/courses/:courseId/tutors/:tutorId",
			evalAPI.CoursesCourseIdTutorsTutorIdPatch,
		},

		{
			"CoursesCourseIdTutorsTutorIdReportGet",
			http.MethodGet,
			"/v1/courses/:courseId/tutors/:tutorId/report",
			evalAPI.CoursesCourseIdTutorsTutorIdReportGet,
		},

		{
			"CoursesGet",
			http.MethodGet,
			"/v1/courses",
			evalAPI.CoursesGet,
		},

		{
			"CoursesPost",
			http.MethodPost,
			"/v1/courses",
			evalAPI.CoursesPost,
		},

		{
			"FacultiesFacultyIdGet",
			http.MethodGet,
			"/v1/faculties/:facultyId",
			evalAPI.FacultiesFacultyIdGet,
		},

		{
			"FacultiesFacultyIdPatch",
			http.MethodPatch,
			"/v1/faculties/:facultyId",
			evalAPI.FacultiesFacultyIdPatch,
		},

		{
			"FacultiesGet",
			http.MethodGet,
			"/v1/faculties",
			evalAPI.FacultiesGet,
		},

		{
			"FacultiesPost",
			http.MethodPost,
			"/v1/faculties",
			evalAPI.FacultiesPost,
		},

		{
			"FormsFormIdGet",
			http.MethodGet,
			"/v1/forms/:formId",
			evalAPI.FormsFormIdGet,
		},

		{
			"FormsFormIdPatch",
			http.MethodPatch,
			"/v1/forms/:formId",
			evalAPI.FormsFormIdPatch,
		},

		{
			"FormsGet",
			http.MethodGet,
			"/v1/forms",
			evalAPI.FormsGet,
		},

		{
			"FormsPost",
			http.MethodPost,
			"/v1/forms",
			evalAPI.FormsPost,
		},

		{
			"ModulesGet",
			http.MethodGet,
			"/v1/modules",
			evalAPI.ModulesGet,
		},

		{
			"ModulesModuleIdDelete",
			http.MethodDelete,
			"/v1/modules/:moduleId",
			evalAPI.ModulesModuleIdDelete,
		},

		{
			"ModulesModuleIdGet",
			http.MethodGet,
			"/v1/modules/:moduleId",
			evalAPI.ModulesModuleIdGet,
		},

		{
			"ModulesModuleIdPatch",
			http.MethodPatch,
			"/v1/modules/:moduleId",
			evalAPI.ModulesModuleIdPatch,
		},

		{
			"ModulesPost",
			http.MethodPost,
			"/v1/modules",
			evalAPI.ModulesPost,
		},

		{
			"ProfsGet",
			http.MethodGet,
			"/v1/profs",
			evalAPI.ProfsGet,
		},

		{
			"ProfsPost",
			http.MethodPost,
			"/v1/profs",
			evalAPI.ProfsPost,
		},

		{
			"ProfsProfIdDelete",
			http.MethodDelete,
			"/v1/profs/:profId",
			evalAPI.ProfsProfIdDelete,
		},

		{
			"ProfsProfIdGet",
			http.MethodGet,
			"/v1/profs/:profId",
			evalAPI.ProfsProfIdGet,
		},

		{
			"ProfsProfIdPatch",
			http.MethodPatch,
			"/v1/profs/:profId",
			evalAPI.ProfsProfIdPatch,
		},

		{
			"QuestionaireInvitationIdGet",
			http.MethodGet,
			"/v1/questionaire/:invitationId",
			evalAPI.QuestionaireInvitationIdGet,
		},

		{
			"QuestionaireInvitationIdPost",
			http.MethodPost,
			"/v1/questionaire/:invitationId",
			evalAPI.QuestionaireInvitationIdPost,
		},

		{
			"TermsGet",
			http.MethodGet,
			"/v1/terms",
			evalAPI.TermsGet,
		},

		{
			"TermsPost",
			http.MethodPost,
			"/v1/terms",
			evalAPI.TermsPost,
		},

		{
			"TermsTermIdGet",
			http.MethodGet,
			"/v1/terms/:termId",
			evalAPI.TermsTermIdGet,
		},

		{
			"TermsTermIdPatch",
			http.MethodPatch,
			"/v1/terms/:termId",
			evalAPI.TermsTermIdPatch,
		},

		{
			"TermsTermIdReportGet",
			http.MethodGet,
			"/v1/terms/:termId/report",
			evalAPI.TermsTermIdReportGet,
		},
	}
	router := gin.Default()
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

// tslint:disable
/**
 * Evaluation
 * This API descripes the online evaluation service, as accessed by the user and organizers.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    Course,
    CourseFromJSON,
    CourseToJSON,
    CourseProf,
    CourseProfFromJSON,
    CourseProfToJSON,
    CourseProfReport,
    CourseProfReportFromJSON,
    CourseProfReportToJSON,
    CourseReport,
    CourseReportFromJSON,
    CourseReportToJSON,
    EmptyForm,
    EmptyFormFromJSON,
    EmptyFormToJSON,
    Faculty,
    FacultyFromJSON,
    FacultyToJSON,
    Form,
    FormFromJSON,
    FormToJSON,
    Invitation,
    InvitationFromJSON,
    InvitationToJSON,
    Module,
    ModuleFromJSON,
    ModuleToJSON,
    Prof,
    ProfFromJSON,
    ProfToJSON,
    Questionaire,
    QuestionaireFromJSON,
    QuestionaireToJSON,
    Term,
    TermFromJSON,
    TermToJSON,
    TermReport,
    TermReportFromJSON,
    TermReportToJSON,
    Tutor,
    TutorFromJSON,
    TutorToJSON,
    TutorReport,
    TutorReportFromJSON,
    TutorReportToJSON,
} from '../models/index';

export interface CourseprofsCourseProfIdDeleteRequest {
    courseProfId: string;
}

export interface CourseprofsCourseProfIdGetRequest {
    courseProfId: string;
}

export interface CourseprofsCourseProfIdPatchRequest {
    courseProfId: string;
    courseProf: CourseProf;
}

export interface CourseprofsCourseProfIdReportGetRequest {
    courseProfId: string;
}

export interface CourseprofsPostRequest {
    courseProf: CourseProf;
}

export interface CoursesCourseIdDeleteRequest {
    courseId: string;
}

export interface CoursesCourseIdGetRequest {
    courseId: string;
}

export interface CoursesCourseIdInvitationsGetRequest {
    courseId: string;
}

export interface CoursesCourseIdPatchRequest {
    courseId: string;
    course: Course;
}

export interface CoursesCourseIdReportGetRequest {
    courseId: string;
}

export interface CoursesCourseIdTutorsGetRequest {
    courseId: string;
}

export interface CoursesCourseIdTutorsPostRequest {
    courseId: string;
    tutor: Tutor;
}

export interface CoursesCourseIdTutorsTutorIdDeleteRequest {
    courseId: string;
    tutorId: string;
}

export interface CoursesCourseIdTutorsTutorIdGetRequest {
    courseId: string;
    tutorId: string;
}

export interface CoursesCourseIdTutorsTutorIdPatchRequest {
    courseId: string;
    tutorId: string;
    tutor: Tutor;
}

export interface CoursesCourseIdTutorsTutorIdReportGetRequest {
    courseId: string;
    tutorId: string;
}

export interface CoursesPostRequest {
    course: Course;
}

export interface FacultiesFacultyIdGetRequest {
    facultyId: string;
}

export interface FacultiesFacultyIdPatchRequest {
    facultyId: string;
    faculty: Faculty;
}

export interface FacultiesPostRequest {
    faculty: Faculty;
}

export interface FormsFormIdGetRequest {
    formId: string;
}

export interface FormsFormIdPatchRequest {
    formId: string;
    form: Form;
}

export interface FormsPostRequest {
    form: Form;
}

export interface ModulesModuleIdDeleteRequest {
    moduleId: string;
}

export interface ModulesModuleIdGetRequest {
    moduleId: string;
}

export interface ModulesModuleIdPatchRequest {
    moduleId: string;
    module: Module;
}

export interface ModulesPostRequest {
    module: Module;
}

export interface ProfsPostRequest {
    prof: Prof;
}

export interface ProfsProfIdDeleteRequest {
    profId: string;
}

export interface ProfsProfIdGetRequest {
    profId: string;
}

export interface ProfsProfIdPatchRequest {
    profId: string;
    prof: Prof;
}

export interface QuestionaireInvitationIdGetRequest {
    invitationId: string;
}

export interface QuestionaireInvitationIdPostRequest {
    invitationId: string;
    questionaire: Questionaire;
}

export interface TermsPostRequest {
    term: Term;
}

export interface TermsTermIdGetRequest {
    termId: string;
}

export interface TermsTermIdPatchRequest {
    termId: string;
    term: Term;
}

export interface TermsTermIdReportGetRequest {
    termId: string;
}


/**
 * Deletes a module by ID
 */
function courseprofsCourseProfIdDeleteRaw<T>(requestParameters: CourseprofsCourseProfIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.courseProfId === null || requestParameters.courseProfId === undefined) {
        throw new runtime.RequiredError('courseProfId','Required parameter requestParameters.courseProfId was null or undefined when calling courseprofsCourseProfIdDelete.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courseprofs/{courseProfId}`.replace(`{${"courseProfId"}}`, encodeURIComponent(String(requestParameters.courseProfId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a module by ID
*/
export function courseprofsCourseProfIdDelete<T>(requestParameters: CourseprofsCourseProfIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return courseprofsCourseProfIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a courseprof by ID
 */
function courseprofsCourseProfIdGetRaw<T>(requestParameters: CourseprofsCourseProfIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, CourseProf> = {}): QueryConfig<T> {
    if (requestParameters.courseProfId === null || requestParameters.courseProfId === undefined) {
        throw new runtime.RequiredError('courseProfId','Required parameter requestParameters.courseProfId was null or undefined when calling courseprofsCourseProfIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courseprofs/{courseProfId}`.replace(`{${"courseProfId"}}`, encodeURIComponent(String(requestParameters.courseProfId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseProfFromJSON(body), text);
    }

    return config;
}

/**
* Get a courseprof by ID
*/
export function courseprofsCourseProfIdGet<T>(requestParameters: CourseprofsCourseProfIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CourseProf>): QueryConfig<T> {
    return courseprofsCourseProfIdGetRaw(requestParameters, requestConfig);
}

/**
 * Change a courseprof by ID
 */
function courseprofsCourseProfIdPatchRaw<T>(requestParameters: CourseprofsCourseProfIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, CourseProf> = {}): QueryConfig<T> {
    if (requestParameters.courseProfId === null || requestParameters.courseProfId === undefined) {
        throw new runtime.RequiredError('courseProfId','Required parameter requestParameters.courseProfId was null or undefined when calling courseprofsCourseProfIdPatch.');
    }

    if (requestParameters.courseProf === null || requestParameters.courseProf === undefined) {
        throw new runtime.RequiredError('courseProf','Required parameter requestParameters.courseProf was null or undefined when calling courseprofsCourseProfIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courseprofs/{courseProfId}`.replace(`{${"courseProfId"}}`, encodeURIComponent(String(requestParameters.courseProfId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || CourseProfToJSON(requestParameters.courseProf),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseProfFromJSON(body), text);
    }

    return config;
}

/**
* Change a courseprof by ID
*/
export function courseprofsCourseProfIdPatch<T>(requestParameters: CourseprofsCourseProfIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, CourseProf>): QueryConfig<T> {
    return courseprofsCourseProfIdPatchRaw(requestParameters, requestConfig);
}

/**
 * Get a courseProf report
 */
function courseprofsCourseProfIdReportGetRaw<T>(requestParameters: CourseprofsCourseProfIdReportGetRequest, requestConfig: runtime.TypedQueryConfig<T, CourseProfReport> = {}): QueryConfig<T> {
    if (requestParameters.courseProfId === null || requestParameters.courseProfId === undefined) {
        throw new runtime.RequiredError('courseProfId','Required parameter requestParameters.courseProfId was null or undefined when calling courseprofsCourseProfIdReportGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courseprofs/{courseProfId}/report`.replace(`{${"courseProfId"}}`, encodeURIComponent(String(requestParameters.courseProfId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseProfReportFromJSON(body), text);
    }

    return config;
}

/**
* Get a courseProf report
*/
export function courseprofsCourseProfIdReportGet<T>(requestParameters: CourseprofsCourseProfIdReportGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CourseProfReport>): QueryConfig<T> {
    return courseprofsCourseProfIdReportGetRaw(requestParameters, requestConfig);
}

/**
 */
function courseprofsGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<CourseProf>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courseprofs`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(CourseProfFromJSON), text);
    }

    return config;
}

/**
*/
export function courseprofsGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<CourseProf>>): QueryConfig<T> {
    return courseprofsGetRaw( requestConfig);
}

/**
 */
function courseprofsPostRaw<T>(requestParameters: CourseprofsPostRequest, requestConfig: runtime.TypedQueryConfig<T, CourseProf> = {}): QueryConfig<T> {
    if (requestParameters.courseProf === null || requestParameters.courseProf === undefined) {
        throw new runtime.RequiredError('courseProf','Required parameter requestParameters.courseProf was null or undefined when calling courseprofsPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courseprofs`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CourseProfToJSON(requestParameters.courseProf),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseProfFromJSON(body), text);
    }

    return config;
}

/**
*/
export function courseprofsPost<T>(requestParameters: CourseprofsPostRequest, requestConfig?: runtime.TypedQueryConfig<T, CourseProf>): QueryConfig<T> {
    return courseprofsPostRaw(requestParameters, requestConfig);
}

/**
 * Deletes a module by ID
 */
function coursesCourseIdDeleteRaw<T>(requestParameters: CoursesCourseIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdDelete.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a module by ID
*/
export function coursesCourseIdDelete<T>(requestParameters: CoursesCourseIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return coursesCourseIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a course by ID
 */
function coursesCourseIdGetRaw<T>(requestParameters: CoursesCourseIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Course> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseFromJSON(body), text);
    }

    return config;
}

/**
* Get a course by ID
*/
export function coursesCourseIdGet<T>(requestParameters: CoursesCourseIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Course>): QueryConfig<T> {
    return coursesCourseIdGetRaw(requestParameters, requestConfig);
}

/**
 */
function coursesCourseIdInvitationsGetRaw<T>(requestParameters: CoursesCourseIdInvitationsGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Invitation>> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdInvitationsGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/invitations`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(InvitationFromJSON), text);
    }

    return config;
}

/**
*/
export function coursesCourseIdInvitationsGet<T>(requestParameters: CoursesCourseIdInvitationsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Invitation>>): QueryConfig<T> {
    return coursesCourseIdInvitationsGetRaw(requestParameters, requestConfig);
}

/**
 * Change a course by ID
 */
function coursesCourseIdPatchRaw<T>(requestParameters: CoursesCourseIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, Course> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdPatch.');
    }

    if (requestParameters.course === null || requestParameters.course === undefined) {
        throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling coursesCourseIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || CourseToJSON(requestParameters.course),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseFromJSON(body), text);
    }

    return config;
}

/**
* Change a course by ID
*/
export function coursesCourseIdPatch<T>(requestParameters: CoursesCourseIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, Course>): QueryConfig<T> {
    return coursesCourseIdPatchRaw(requestParameters, requestConfig);
}

/**
 * Get a course report
 */
function coursesCourseIdReportGetRaw<T>(requestParameters: CoursesCourseIdReportGetRequest, requestConfig: runtime.TypedQueryConfig<T, CourseReport> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdReportGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/report`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseReportFromJSON(body), text);
    }

    return config;
}

/**
* Get a course report
*/
export function coursesCourseIdReportGet<T>(requestParameters: CoursesCourseIdReportGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CourseReport>): QueryConfig<T> {
    return coursesCourseIdReportGetRaw(requestParameters, requestConfig);
}

/**
 */
function coursesCourseIdTutorsGetRaw<T>(requestParameters: CoursesCourseIdTutorsGetRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Tutor>> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdTutorsGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/tutors`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TutorFromJSON), text);
    }

    return config;
}

/**
*/
export function coursesCourseIdTutorsGet<T>(requestParameters: CoursesCourseIdTutorsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Tutor>>): QueryConfig<T> {
    return coursesCourseIdTutorsGetRaw(requestParameters, requestConfig);
}

/**
 */
function coursesCourseIdTutorsPostRaw<T>(requestParameters: CoursesCourseIdTutorsPostRequest, requestConfig: runtime.TypedQueryConfig<T, Tutor> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdTutorsPost.');
    }

    if (requestParameters.tutor === null || requestParameters.tutor === undefined) {
        throw new runtime.RequiredError('tutor','Required parameter requestParameters.tutor was null or undefined when calling coursesCourseIdTutorsPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/tutors`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TutorToJSON(requestParameters.tutor),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TutorFromJSON(body), text);
    }

    return config;
}

/**
*/
export function coursesCourseIdTutorsPost<T>(requestParameters: CoursesCourseIdTutorsPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Tutor>): QueryConfig<T> {
    return coursesCourseIdTutorsPostRaw(requestParameters, requestConfig);
}

/**
 * Deletes a tutor by ID
 */
function coursesCourseIdTutorsTutorIdDeleteRaw<T>(requestParameters: CoursesCourseIdTutorsTutorIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdTutorsTutorIdDelete.');
    }

    if (requestParameters.tutorId === null || requestParameters.tutorId === undefined) {
        throw new runtime.RequiredError('tutorId','Required parameter requestParameters.tutorId was null or undefined when calling coursesCourseIdTutorsTutorIdDelete.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/tutors/{tutorId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))).replace(`{${"tutorId"}}`, encodeURIComponent(String(requestParameters.tutorId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a tutor by ID
*/
export function coursesCourseIdTutorsTutorIdDelete<T>(requestParameters: CoursesCourseIdTutorsTutorIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return coursesCourseIdTutorsTutorIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a tutor by ID
 */
function coursesCourseIdTutorsTutorIdGetRaw<T>(requestParameters: CoursesCourseIdTutorsTutorIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Tutor> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdTutorsTutorIdGet.');
    }

    if (requestParameters.tutorId === null || requestParameters.tutorId === undefined) {
        throw new runtime.RequiredError('tutorId','Required parameter requestParameters.tutorId was null or undefined when calling coursesCourseIdTutorsTutorIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/tutors/{tutorId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))).replace(`{${"tutorId"}}`, encodeURIComponent(String(requestParameters.tutorId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TutorFromJSON(body), text);
    }

    return config;
}

/**
* Get a tutor by ID
*/
export function coursesCourseIdTutorsTutorIdGet<T>(requestParameters: CoursesCourseIdTutorsTutorIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Tutor>): QueryConfig<T> {
    return coursesCourseIdTutorsTutorIdGetRaw(requestParameters, requestConfig);
}

/**
 * Change a tutor by ID
 */
function coursesCourseIdTutorsTutorIdPatchRaw<T>(requestParameters: CoursesCourseIdTutorsTutorIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, Tutor> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdTutorsTutorIdPatch.');
    }

    if (requestParameters.tutorId === null || requestParameters.tutorId === undefined) {
        throw new runtime.RequiredError('tutorId','Required parameter requestParameters.tutorId was null or undefined when calling coursesCourseIdTutorsTutorIdPatch.');
    }

    if (requestParameters.tutor === null || requestParameters.tutor === undefined) {
        throw new runtime.RequiredError('tutor','Required parameter requestParameters.tutor was null or undefined when calling coursesCourseIdTutorsTutorIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/tutors/{tutorId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))).replace(`{${"tutorId"}}`, encodeURIComponent(String(requestParameters.tutorId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || TutorToJSON(requestParameters.tutor),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TutorFromJSON(body), text);
    }

    return config;
}

/**
* Change a tutor by ID
*/
export function coursesCourseIdTutorsTutorIdPatch<T>(requestParameters: CoursesCourseIdTutorsTutorIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, Tutor>): QueryConfig<T> {
    return coursesCourseIdTutorsTutorIdPatchRaw(requestParameters, requestConfig);
}

/**
 * Get a tutor report
 */
function coursesCourseIdTutorsTutorIdReportGetRaw<T>(requestParameters: CoursesCourseIdTutorsTutorIdReportGetRequest, requestConfig: runtime.TypedQueryConfig<T, TutorReport> = {}): QueryConfig<T> {
    if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
        throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling coursesCourseIdTutorsTutorIdReportGet.');
    }

    if (requestParameters.tutorId === null || requestParameters.tutorId === undefined) {
        throw new runtime.RequiredError('tutorId','Required parameter requestParameters.tutorId was null or undefined when calling coursesCourseIdTutorsTutorIdReportGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses/{courseId}/tutors/{tutorId}/report`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))).replace(`{${"tutorId"}}`, encodeURIComponent(String(requestParameters.tutorId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TutorReportFromJSON(body), text);
    }

    return config;
}

/**
* Get a tutor report
*/
export function coursesCourseIdTutorsTutorIdReportGet<T>(requestParameters: CoursesCourseIdTutorsTutorIdReportGetRequest, requestConfig?: runtime.TypedQueryConfig<T, TutorReport>): QueryConfig<T> {
    return coursesCourseIdTutorsTutorIdReportGetRaw(requestParameters, requestConfig);
}

/**
 */
function coursesGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Course>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(CourseFromJSON), text);
    }

    return config;
}

/**
*/
export function coursesGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Course>>): QueryConfig<T> {
    return coursesGetRaw( requestConfig);
}

/**
 */
function coursesPostRaw<T>(requestParameters: CoursesPostRequest, requestConfig: runtime.TypedQueryConfig<T, Course> = {}): QueryConfig<T> {
    if (requestParameters.course === null || requestParameters.course === undefined) {
        throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling coursesPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/courses`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || CourseToJSON(requestParameters.course),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CourseFromJSON(body), text);
    }

    return config;
}

/**
*/
export function coursesPost<T>(requestParameters: CoursesPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Course>): QueryConfig<T> {
    return coursesPostRaw(requestParameters, requestConfig);
}

/**
 * Get a faculty by ID
 */
function facultiesFacultyIdGetRaw<T>(requestParameters: FacultiesFacultyIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Faculty> = {}): QueryConfig<T> {
    if (requestParameters.facultyId === null || requestParameters.facultyId === undefined) {
        throw new runtime.RequiredError('facultyId','Required parameter requestParameters.facultyId was null or undefined when calling facultiesFacultyIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/faculties/{facultyId}`.replace(`{${"facultyId"}}`, encodeURIComponent(String(requestParameters.facultyId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FacultyFromJSON(body), text);
    }

    return config;
}

/**
* Get a faculty by ID
*/
export function facultiesFacultyIdGet<T>(requestParameters: FacultiesFacultyIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Faculty>): QueryConfig<T> {
    return facultiesFacultyIdGetRaw(requestParameters, requestConfig);
}

/**
 * Change a faculty by ID
 */
function facultiesFacultyIdPatchRaw<T>(requestParameters: FacultiesFacultyIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, Faculty> = {}): QueryConfig<T> {
    if (requestParameters.facultyId === null || requestParameters.facultyId === undefined) {
        throw new runtime.RequiredError('facultyId','Required parameter requestParameters.facultyId was null or undefined when calling facultiesFacultyIdPatch.');
    }

    if (requestParameters.faculty === null || requestParameters.faculty === undefined) {
        throw new runtime.RequiredError('faculty','Required parameter requestParameters.faculty was null or undefined when calling facultiesFacultyIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/faculties/{facultyId}`.replace(`{${"facultyId"}}`, encodeURIComponent(String(requestParameters.facultyId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || FacultyToJSON(requestParameters.faculty),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FacultyFromJSON(body), text);
    }

    return config;
}

/**
* Change a faculty by ID
*/
export function facultiesFacultyIdPatch<T>(requestParameters: FacultiesFacultyIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, Faculty>): QueryConfig<T> {
    return facultiesFacultyIdPatchRaw(requestParameters, requestConfig);
}

/**
 */
function facultiesGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Faculty>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/faculties`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FacultyFromJSON), text);
    }

    return config;
}

/**
*/
export function facultiesGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Faculty>>): QueryConfig<T> {
    return facultiesGetRaw( requestConfig);
}

/**
 */
function facultiesPostRaw<T>(requestParameters: FacultiesPostRequest, requestConfig: runtime.TypedQueryConfig<T, Faculty> = {}): QueryConfig<T> {
    if (requestParameters.faculty === null || requestParameters.faculty === undefined) {
        throw new runtime.RequiredError('faculty','Required parameter requestParameters.faculty was null or undefined when calling facultiesPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/faculties`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FacultyToJSON(requestParameters.faculty),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FacultyFromJSON(body), text);
    }

    return config;
}

/**
*/
export function facultiesPost<T>(requestParameters: FacultiesPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Faculty>): QueryConfig<T> {
    return facultiesPostRaw(requestParameters, requestConfig);
}

/**
 * Get a form by ID
 */
function formsFormIdGetRaw<T>(requestParameters: FormsFormIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Form> = {}): QueryConfig<T> {
    if (requestParameters.formId === null || requestParameters.formId === undefined) {
        throw new runtime.RequiredError('formId','Required parameter requestParameters.formId was null or undefined when calling formsFormIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/forms/{formId}`.replace(`{${"formId"}}`, encodeURIComponent(String(requestParameters.formId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormFromJSON(body), text);
    }

    return config;
}

/**
* Get a form by ID
*/
export function formsFormIdGet<T>(requestParameters: FormsFormIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Form>): QueryConfig<T> {
    return formsFormIdGetRaw(requestParameters, requestConfig);
}

/**
 * Change a form by ID
 */
function formsFormIdPatchRaw<T>(requestParameters: FormsFormIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, Form> = {}): QueryConfig<T> {
    if (requestParameters.formId === null || requestParameters.formId === undefined) {
        throw new runtime.RequiredError('formId','Required parameter requestParameters.formId was null or undefined when calling formsFormIdPatch.');
    }

    if (requestParameters.form === null || requestParameters.form === undefined) {
        throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling formsFormIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/forms/{formId}`.replace(`{${"formId"}}`, encodeURIComponent(String(requestParameters.formId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || FormToJSON(requestParameters.form),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormFromJSON(body), text);
    }

    return config;
}

/**
* Change a form by ID
*/
export function formsFormIdPatch<T>(requestParameters: FormsFormIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, Form>): QueryConfig<T> {
    return formsFormIdPatchRaw(requestParameters, requestConfig);
}

/**
 */
function formsGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Form>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/forms`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FormFromJSON), text);
    }

    return config;
}

/**
*/
export function formsGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Form>>): QueryConfig<T> {
    return formsGetRaw( requestConfig);
}

/**
 */
function formsPostRaw<T>(requestParameters: FormsPostRequest, requestConfig: runtime.TypedQueryConfig<T, Form> = {}): QueryConfig<T> {
    if (requestParameters.form === null || requestParameters.form === undefined) {
        throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling formsPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/forms`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || FormToJSON(requestParameters.form),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FormFromJSON(body), text);
    }

    return config;
}

/**
*/
export function formsPost<T>(requestParameters: FormsPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Form>): QueryConfig<T> {
    return formsPostRaw(requestParameters, requestConfig);
}

/**
 */
function modulesGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Module>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/modules`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ModuleFromJSON), text);
    }

    return config;
}

/**
*/
export function modulesGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Module>>): QueryConfig<T> {
    return modulesGetRaw( requestConfig);
}

/**
 * Deletes a module by ID
 */
function modulesModuleIdDeleteRaw<T>(requestParameters: ModulesModuleIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.moduleId === null || requestParameters.moduleId === undefined) {
        throw new runtime.RequiredError('moduleId','Required parameter requestParameters.moduleId was null or undefined when calling modulesModuleIdDelete.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/modules/{moduleId}`.replace(`{${"moduleId"}}`, encodeURIComponent(String(requestParameters.moduleId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a module by ID
*/
export function modulesModuleIdDelete<T>(requestParameters: ModulesModuleIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return modulesModuleIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a module by ID
 */
function modulesModuleIdGetRaw<T>(requestParameters: ModulesModuleIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Module> = {}): QueryConfig<T> {
    if (requestParameters.moduleId === null || requestParameters.moduleId === undefined) {
        throw new runtime.RequiredError('moduleId','Required parameter requestParameters.moduleId was null or undefined when calling modulesModuleIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/modules/{moduleId}`.replace(`{${"moduleId"}}`, encodeURIComponent(String(requestParameters.moduleId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ModuleFromJSON(body), text);
    }

    return config;
}

/**
* Get a module by ID
*/
export function modulesModuleIdGet<T>(requestParameters: ModulesModuleIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Module>): QueryConfig<T> {
    return modulesModuleIdGetRaw(requestParameters, requestConfig);
}

/**
 * Change a module by ID
 */
function modulesModuleIdPatchRaw<T>(requestParameters: ModulesModuleIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, Module> = {}): QueryConfig<T> {
    if (requestParameters.moduleId === null || requestParameters.moduleId === undefined) {
        throw new runtime.RequiredError('moduleId','Required parameter requestParameters.moduleId was null or undefined when calling modulesModuleIdPatch.');
    }

    if (requestParameters.module === null || requestParameters.module === undefined) {
        throw new runtime.RequiredError('module','Required parameter requestParameters.module was null or undefined when calling modulesModuleIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/modules/{moduleId}`.replace(`{${"moduleId"}}`, encodeURIComponent(String(requestParameters.moduleId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || ModuleToJSON(requestParameters.module),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ModuleFromJSON(body), text);
    }

    return config;
}

/**
* Change a module by ID
*/
export function modulesModuleIdPatch<T>(requestParameters: ModulesModuleIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, Module>): QueryConfig<T> {
    return modulesModuleIdPatchRaw(requestParameters, requestConfig);
}

/**
 */
function modulesPostRaw<T>(requestParameters: ModulesPostRequest, requestConfig: runtime.TypedQueryConfig<T, Module> = {}): QueryConfig<T> {
    if (requestParameters.module === null || requestParameters.module === undefined) {
        throw new runtime.RequiredError('module','Required parameter requestParameters.module was null or undefined when calling modulesPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/modules`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ModuleToJSON(requestParameters.module),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ModuleFromJSON(body), text);
    }

    return config;
}

/**
*/
export function modulesPost<T>(requestParameters: ModulesPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Module>): QueryConfig<T> {
    return modulesPostRaw(requestParameters, requestConfig);
}

/**
 */
function profsGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Prof>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/profs`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ProfFromJSON), text);
    }

    return config;
}

/**
*/
export function profsGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Prof>>): QueryConfig<T> {
    return profsGetRaw( requestConfig);
}

/**
 */
function profsPostRaw<T>(requestParameters: ProfsPostRequest, requestConfig: runtime.TypedQueryConfig<T, Prof> = {}): QueryConfig<T> {
    if (requestParameters.prof === null || requestParameters.prof === undefined) {
        throw new runtime.RequiredError('prof','Required parameter requestParameters.prof was null or undefined when calling profsPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/profs`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ProfToJSON(requestParameters.prof),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProfFromJSON(body), text);
    }

    return config;
}

/**
*/
export function profsPost<T>(requestParameters: ProfsPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Prof>): QueryConfig<T> {
    return profsPostRaw(requestParameters, requestConfig);
}

/**
 * Deletes a module by ID
 */
function profsProfIdDeleteRaw<T>(requestParameters: ProfsProfIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.profId === null || requestParameters.profId === undefined) {
        throw new runtime.RequiredError('profId','Required parameter requestParameters.profId was null or undefined when calling profsProfIdDelete.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/profs/{profId}`.replace(`{${"profId"}}`, encodeURIComponent(String(requestParameters.profId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a module by ID
*/
export function profsProfIdDelete<T>(requestParameters: ProfsProfIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return profsProfIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Get a prof by ID
 */
function profsProfIdGetRaw<T>(requestParameters: ProfsProfIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Prof> = {}): QueryConfig<T> {
    if (requestParameters.profId === null || requestParameters.profId === undefined) {
        throw new runtime.RequiredError('profId','Required parameter requestParameters.profId was null or undefined when calling profsProfIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/profs/{profId}`.replace(`{${"profId"}}`, encodeURIComponent(String(requestParameters.profId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProfFromJSON(body), text);
    }

    return config;
}

/**
* Get a prof by ID
*/
export function profsProfIdGet<T>(requestParameters: ProfsProfIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Prof>): QueryConfig<T> {
    return profsProfIdGetRaw(requestParameters, requestConfig);
}

/**
 * Change a prof by ID
 */
function profsProfIdPatchRaw<T>(requestParameters: ProfsProfIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, Prof> = {}): QueryConfig<T> {
    if (requestParameters.profId === null || requestParameters.profId === undefined) {
        throw new runtime.RequiredError('profId','Required parameter requestParameters.profId was null or undefined when calling profsProfIdPatch.');
    }

    if (requestParameters.prof === null || requestParameters.prof === undefined) {
        throw new runtime.RequiredError('prof','Required parameter requestParameters.prof was null or undefined when calling profsProfIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/profs/{profId}`.replace(`{${"profId"}}`, encodeURIComponent(String(requestParameters.profId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || ProfToJSON(requestParameters.prof),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProfFromJSON(body), text);
    }

    return config;
}

/**
* Change a prof by ID
*/
export function profsProfIdPatch<T>(requestParameters: ProfsProfIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, Prof>): QueryConfig<T> {
    return profsProfIdPatchRaw(requestParameters, requestConfig);
}

/**
 */
function questionaireInvitationIdGetRaw<T>(requestParameters: QuestionaireInvitationIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, EmptyForm> = {}): QueryConfig<T> {
    if (requestParameters.invitationId === null || requestParameters.invitationId === undefined) {
        throw new runtime.RequiredError('invitationId','Required parameter requestParameters.invitationId was null or undefined when calling questionaireInvitationIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/questionaire/{invitationId}`.replace(`{${"invitationId"}}`, encodeURIComponent(String(requestParameters.invitationId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EmptyFormFromJSON(body), text);
    }

    return config;
}

/**
*/
export function questionaireInvitationIdGet<T>(requestParameters: QuestionaireInvitationIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, EmptyForm>): QueryConfig<T> {
    return questionaireInvitationIdGetRaw(requestParameters, requestConfig);
}

/**
 */
function questionaireInvitationIdPostRaw<T>(requestParameters: QuestionaireInvitationIdPostRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.invitationId === null || requestParameters.invitationId === undefined) {
        throw new runtime.RequiredError('invitationId','Required parameter requestParameters.invitationId was null or undefined when calling questionaireInvitationIdPost.');
    }

    if (requestParameters.questionaire === null || requestParameters.questionaire === undefined) {
        throw new runtime.RequiredError('questionaire','Required parameter requestParameters.questionaire was null or undefined when calling questionaireInvitationIdPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/questionaire/{invitationId}`.replace(`{${"invitationId"}}`, encodeURIComponent(String(requestParameters.invitationId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || QuestionaireToJSON(requestParameters.questionaire),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function questionaireInvitationIdPost<T>(requestParameters: QuestionaireInvitationIdPostRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return questionaireInvitationIdPostRaw(requestParameters, requestConfig);
}

/**
 */
function termsGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Term>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/terms`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TermFromJSON), text);
    }

    return config;
}

/**
*/
export function termsGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Term>>): QueryConfig<T> {
    return termsGetRaw( requestConfig);
}

/**
 */
function termsPostRaw<T>(requestParameters: TermsPostRequest, requestConfig: runtime.TypedQueryConfig<T, Term> = {}): QueryConfig<T> {
    if (requestParameters.term === null || requestParameters.term === undefined) {
        throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling termsPost.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/terms`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TermToJSON(requestParameters.term),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TermFromJSON(body), text);
    }

    return config;
}

/**
*/
export function termsPost<T>(requestParameters: TermsPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Term>): QueryConfig<T> {
    return termsPostRaw(requestParameters, requestConfig);
}

/**
 * Get a term by ID
 */
function termsTermIdGetRaw<T>(requestParameters: TermsTermIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Term> = {}): QueryConfig<T> {
    if (requestParameters.termId === null || requestParameters.termId === undefined) {
        throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling termsTermIdGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/terms/{termId}`.replace(`{${"termId"}}`, encodeURIComponent(String(requestParameters.termId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TermFromJSON(body), text);
    }

    return config;
}

/**
* Get a term by ID
*/
export function termsTermIdGet<T>(requestParameters: TermsTermIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Term>): QueryConfig<T> {
    return termsTermIdGetRaw(requestParameters, requestConfig);
}

/**
 * Change a term by ID
 */
function termsTermIdPatchRaw<T>(requestParameters: TermsTermIdPatchRequest, requestConfig: runtime.TypedQueryConfig<T, Term> = {}): QueryConfig<T> {
    if (requestParameters.termId === null || requestParameters.termId === undefined) {
        throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling termsTermIdPatch.');
    }

    if (requestParameters.term === null || requestParameters.term === undefined) {
        throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling termsTermIdPatch.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/terms/{termId}`.replace(`{${"termId"}}`, encodeURIComponent(String(requestParameters.termId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters || TermToJSON(requestParameters.term),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TermFromJSON(body), text);
    }

    return config;
}

/**
* Change a term by ID
*/
export function termsTermIdPatch<T>(requestParameters: TermsTermIdPatchRequest, requestConfig?: runtime.TypedQueryConfig<T, Term>): QueryConfig<T> {
    return termsTermIdPatchRaw(requestParameters, requestConfig);
}

/**
 * Get a term report
 */
function termsTermIdReportGetRaw<T>(requestParameters: TermsTermIdReportGetRequest, requestConfig: runtime.TypedQueryConfig<T, TermReport> = {}): QueryConfig<T> {
    if (requestParameters.termId === null || requestParameters.termId === undefined) {
        throw new runtime.RequiredError('termId','Required parameter requestParameters.termId was null or undefined when calling termsTermIdReportGet.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/terms/{termId}/report`.replace(`{${"termId"}}`, encodeURIComponent(String(requestParameters.termId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TermReportFromJSON(body), text);
    }

    return config;
}

/**
* Get a term report
*/
export function termsTermIdReportGet<T>(requestParameters: TermsTermIdReportGetRequest, requestConfig?: runtime.TypedQueryConfig<T, TermReport>): QueryConfig<T> {
    return termsTermIdReportGetRaw(requestParameters, requestConfig);
}

